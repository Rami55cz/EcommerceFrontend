@page "/myprofile"
@using EcommerceFrontend.AuthServices
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager NavManager

<h3 class="mb-4 text-center text-primary">My Profile</h3>

@if (profile == null)
{
    <div class="text-center">
        <p><em>Loading your profile...</em></p>
    </div>
}
else
{
    <EditForm Model="profile" OnValidSubmit="HandleValidSubmit" class="card shadow p-4 mx-auto" style="max-width: 600px;">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Username</label>
            <InputText @bind-Value="profile.Username" class="form-control" disabled />
        </div>
        <div class="mb-3">
            <label class="form-label">First Name</label>
            <InputText @bind-Value="profile.FirstName" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Last Name</label>
            <InputText @bind-Value="profile.LastName" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Address</label>
            <InputText @bind-Value="profile.Address" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Email</label>
            <InputText @bind-Value="profile.Email" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Phone Number</label>
            <InputText @bind-Value="profile.PhoneNumber" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Update Profile</button>

        @if (!string.IsNullOrEmpty(confirmationMessage))
        {
            <div class="alert alert-success mt-3" role="alert">
                @confirmationMessage
            </div>
        }
    </EditForm>
}


@code {
    UserProfileModel profile = new UserProfileModel();
    private string confirmationMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await AuthService.SetAuthHeaderAsync();
        profile = await Http.GetFromJsonAsync<UserProfileModel>("api/userprofiles/me") ?? new UserProfileModel();
    }

    async Task HandleValidSubmit()
    {
        var response = await Http.PutAsJsonAsync("api/userprofiles/me", profile);
        if (response.IsSuccessStatusCode)
        {
            confirmationMessage = "Your profile has been updated successfully!";
            NavManager.NavigateTo("/", true);
        }
        else
        {
            confirmationMessage = "An error occurred while updating your profile.";
        }
    }

    public class UserProfileModel
    {
        public int Id { get; set; }
        public string GitHubId { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Address { get; set; }
        public string? Email { get; set; }
        public string? PhoneNumber { get; set; }
        public string Role { get; set; } = string.Empty;
    }
}