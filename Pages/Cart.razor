@page "/cart"
@using EcommerceFrontend.AuthServices
@using EcommerceFrontend.Models
@using EcommerceFrontend.Services
@inject HttpClient Http
@inject AuthService AuthService
@inject ProductService ProductService

<h3>Your Cart</h3>

@if (cartItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead class="table-light">
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th style="width: 100px;">Qty</th>
                <th>Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in userItems)
            {
                <tr>
                    <td>@item.Product?.Name</td>
                    <td>£@item.Product?.Price</td>
                    <td>
                        <input type="number" class="form-control" @bind="item.Quantity" min="1" />
                    </td>
                    <td>£@((item.Product?.Price ?? 0) * item.Quantity)</td>
                    <td>
                        <button class="btn btn-sm btn-success me-2" @onclick="() => UpdateQuantity(item)">
                            <i class="bi bi-arrow-repeat"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item.ProductId)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary mt-3" @onclick="PlaceOrder">Place Order</button>
}

@code {
    private List<CartItem> cartItems = new();
    private List<CartItem> userItems = new();
    private UserProfile CurrentUser = new UserProfile();

    protected override async Task OnInitializedAsync()
    {
        await AuthService.SetAuthHeaderAsync();

        var response = await Http.GetAsync("api/userprofiles/me");

        if (response.IsSuccessStatusCode)
        {
            // User is logged in and can access the profile
            CurrentUser = await response.Content.ReadFromJsonAsync<UserProfile>() ?? new UserProfile();
        }
        else
        {
            // You are not logged in hence you receive a 401 Unauthorized status code
        }
        cartItems = await Http.GetFromJsonAsync<List<CartItem>>($"api/cart/{CurrentUser.Id}");
        // cartItems = cartItems.Where(x => x.UserId == CurrentUser.Id).ToList();
        Console.WriteLine("Cart Items");

        foreach (var userItem in cartItems){
 
            var product = await ProductService.GetProductByIdAsync(userItem.ProductId);
            userItem.Product = product; // Assign the product to the userItem 
            userItems.Add(userItem);
            Console.WriteLine($"Cart Items{userItem}");
        }
    }

    private async Task UpdateQuantity(CartItem item)
    {
        await AuthService.SetAuthHeaderAsync();
        var payload = new
        {
            ProductId = item.ProductId,
            Quantity = item.Quantity
        };
        await Http.PutAsJsonAsync("api/cart", payload);
    }

    private async Task RemoveItem(int productId)
    {
        await AuthService.SetAuthHeaderAsync();
        await Http.DeleteAsync($"api/cart/{productId}");
        cartItems = await Http.GetFromJsonAsync<List<CartItem>>("api/cart");
    }

    private async Task PlaceOrder()
    {
        await AuthService.SetAuthHeaderAsync();
        await Http.PostAsync("api/order", null);
        cartItems.Clear();
    }
}