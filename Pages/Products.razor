@page "/products"
@using EcommerceFrontend.AuthServices
@using EcommerceFrontend.Models
@using EcommerceFrontend.Services
@inject ProductService ProductService
@inject AuthService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Products</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-4">
                <div class="card mb-4">
                    <img src="@product.ImageUrl" class="card-img-top" onerror="this.src='https://via.placeholder.com/300'" />
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p><strong>Â£@product.Price</strong></p>
                        <p>In stock: @product.Stock</p>

                        @if (userRole != "administrator")
                        {
                            <button class="btn btn-primary" @onclick="() => AddToCart(product.Id)">Add to Cart</button>
                        }

                        @if (userRole == "administrator")
                        {
                            <button class="btn btn-warning me-2" @onclick="() => EditProduct(product.Id)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Product>? products;
    private string userRole = "";
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AuthService.SetAuthHeaderAsync();
            userRole = await AuthService.GetUserRoleAsync();
            products = await ProductService.GetProductsAsync();
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Unable to load products. {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    private async Task AddToCart(int productId)
    {
        try
        {
            await AuthService.SetAuthHeaderAsync();

            var payload = new
            {
                ProductId = productId,
                Quantity = 1
            };

            var response = await Http.PostAsJsonAsync("api/cart", payload);
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Failed to add product to cart: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"AddToCart Error: {ex.Message}";
        }
    }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/edit-product/{id}");
    }

    private async Task DeleteProduct(int productId)
    {
        try
        {
            await AuthService.SetAuthHeaderAsync();
            await Http.DeleteAsync($"api/product/{productId}");
            products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"DeleteProduct Error: {ex.Message}";
        }
    }
}
