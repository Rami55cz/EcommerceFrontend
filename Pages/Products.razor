@page "/products"
@using EcommerceFrontend.AuthServices
@using EcommerceFrontend.Models
@using EcommerceFrontend.Services
@inject ProductService ProductService
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<h3>Products</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-4">
                <div class="card mb-4">
                    <img src="@product.ImageUrl" class="card-img-top" />
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p><strong>Â£@product.Price</strong></p>
                        <p>In stock: @product.Stock</p>
                        <button class="btn btn-primary">Add to Cart</button>
                        @if (userRole == "administrator")
                        {
                            <button class="btn btn-success">Add Product</button>
                            <button class="btn btn-warning me-2" @onclick="() => EditProduct(product.Id)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                        }

                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Product>? products;
    private string userRole = "";

    protected override async Task OnInitializedAsync()
    {

        await AuthService.SetAuthHeaderAsync();
        products = await ProductService.GetProductsAsync();
    }

    private async Task EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/edit-product/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        products = await ProductService.GetProductsAsync();
    }
}